#version 330 core
 
// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 normal;
in vec4 position;
 
// Ouput data
out vec4 color;

struct DirLight {
	vec3 direction;
	vec3 diffuse;
	vec3 specular;
	float intensity;
};

struct PointLight {
	vec3 position;
	vec3 diffuse;
	vec3 specular;
	vec3 attenuation;
	float intensity;
};
 
#define NUM_DIR_LIGHTS 20
#define NUM_POINT_LIGHTS 20
// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform vec3 objectEmissiveColor = vec3(0,0,0);
uniform float objectGlow = 0.0f;
uniform vec3 lightAmbientColor = vec3(0,0,0);
uniform float objectReflectance = 0;
uniform DirLight dirlights[NUM_DIR_LIGHTS];
uniform PointLight pointlights[NUM_POINT_LIGHTS];
uniform int numpointlights = 0;
uniform int numdirlights = 0;
uniform float objectSpecFalloff = 20.0;
uniform vec3 objectSpecColor = vec3(1,1,1);
uniform vec3 cameraVec;
uniform mat4 Proj;
uniform mat4 View;
uniform mat4 MVP;
uniform mat4 MV;
 
vec3 RGBtoHSV(vec3 color);
vec3 HSVtoRGB(vec3 color);

void main(){
 
	vec3 totalColor = vec3(0,0,0);
	// EMISSIVE COLOR
	vec3 emissiveColor = objectEmissiveColor * objectGlow;
	totalColor += emissiveColor;

	// AMBIENT COLOR
	vec3 ambientColor = lightAmbientColor * objectReflectance;
	totalColor += ambientColor;

	for (int i = 0; i < numdirlights; ++i)
	{
		float diffuseIntensity = dot(-dirlights[i].direction,normal);
		diffuseIntensity = max(diffuseIntensity, 0);
		vec3 newTextureColor = texture( myTextureSampler, UV ).rgb;

		mat4 I_VP = inverse(Proj * View);
 
		vec3 cameraPos = (inverse(View) * vec4(0,0,0,1)).xyz;
		vec3 cameraToPointVec = normalize(cameraPos - (I_VP * position).xyz);

		vec3 reflectionVector = dirlights[i].direction - dot(dirlights[i].direction, normal) * 2 * normal;
		float lightReflection = dot(cameraToPointVec, normalize(reflectionVector));
		float specintensity = max(lightReflection, 0);

		newTextureColor = RGBtoHSV(newTextureColor);
		newTextureColor.x += lightReflection + 1;
		newTextureColor = HSVtoRGB(newTextureColor);

		totalColor += newTextureColor * dirlights[i].diffuse * diffuseIntensity * dirlights[i].intensity;

		specintensity = pow(specintensity, objectSpecFalloff);
		specintensity *= diffuseIntensity;

		totalColor += dirlights[i].specular * objectSpecColor * specintensity;
	}

	for (int i = 0; i < numpointlights; ++i)
	{
		vec3 pointLightDisp = position.xyz - pointlights[i].position;
		float pointlightdistance = length(pointLightDisp);
		vec3 pointlightdir = normalize(pointLightDisp);
		
		float attenuation = 1.0 / (pointlights[i].attenuation.x +
		pointlights[i].attenuation.y * pointlightdistance +
		pointlights[i].attenuation.z * pointlightdistance * pointlightdistance);

		float diffuseIntensity = dot(-pointlightdir, normal) * attenuation * pointlights[i].intensity;;
		diffuseIntensity = max(diffuseIntensity, 0);
		vec3 newTextureColor = texture( myTextureSampler, UV ).rgb;

		mat4 I_VP = inverse(Proj * View);
 
		vec3 cameraPos = (inverse(View) * vec4(0,0,0,1)).xyz;
		vec3 cameraToPointVec = normalize(cameraPos - (I_VP * position).xyz);

		vec3 reflectionVector = pointlightdir - dot(pointlightdir, normal) * 2 * normal;
		float lightReflection = dot(cameraToPointVec, normalize(reflectionVector));
		float specintensity = max(lightReflection, 0);

		newTextureColor = RGBtoHSV(newTextureColor);
		newTextureColor.x += lightReflection + 1;
		newTextureColor = HSVtoRGB(newTextureColor);

		totalColor += newTextureColor * pointlights[i].diffuse * diffuseIntensity;

		specintensity = pow(specintensity, objectSpecFalloff);
		specintensity *= diffuseIntensity;

		totalColor += pointlights[i].specular * objectSpecColor * specintensity;
	}

	// TOTAL COLOR
    color = vec4(totalColor, 1);

}

vec3 RGBtoHSV(vec3 c){
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 HSVtoRGB(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}