#version 330 core
 
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec3 vertexTangent;
layout(location = 4) in vec3 vertexBiTangent;
 
// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 normal;
out vec3 tangent;
out vec3 bitangent;
 
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV;
 
void main(){
	
	mat4 normalMatrix = transpose(inverse(MV));

	normal = normalize((normalMatrix * vec4(vertexNormal,0)).xyz);
	tangent = normalize((normalMatrix * vec4(vertexTangent,0)).xyz);
	bitangent = normalize((normalMatrix * vec4(vertexBiTangent,0)).xyz);

    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
 
    // UV of the vertex. No special space for this one.
    UV = vertexUV;
}