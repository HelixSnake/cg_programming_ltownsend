#version 330 core
 
// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;
 
// Ouput data
out vec4 color;
 
// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D DiffuseMap;
uniform sampler2D SpecularMap;
uniform sampler2D NormalMap;
uniform vec3 objectEmissiveColor = vec3(0,0,0);
uniform float objectGlow = 0.0f;
uniform vec3 lightAmbientColor = vec3(0,0,0);
uniform float objectReflectance = 0;
uniform vec3 lightDir;
uniform vec3 lightDiffuseColor = vec3(1,1,1);
uniform vec3 lightSpecColor = vec3(1,1,1);
uniform float objectSpecFalloff = 20.0;
uniform vec3 objectSpecColor = vec3(1,1,1);
uniform float objectSpecIntensity = 1;
uniform vec3 cameraVec;
 
void main(){

	mat3 tangentSpaceMat = mat3(tangent, bitangent, normal);
	vec3 newNormal = normalize(tangentSpaceMat * normalize(texture( NormalMap, UV ).rgb * 2.0 - 1.0));
	//vec3 newNormal = normalize(tangentSpaceMat * normalize(vec3(0,0,1)));
	//vec3 newNormal = normal;
	// EMISSIVE COLOR
	vec3 emissiveColor = objectEmissiveColor * objectGlow;

	// AMBIENT COLOR
	vec3 ambientColor = lightAmbientColor * objectReflectance;

	// DIFFUSE COLOR
	float diffuseIntensity = dot(-lightDir,newNormal);
	diffuseIntensity = clamp(diffuseIntensity, 0, 1);

	vec3 diffuseColor = texture( DiffuseMap, UV ).rgb * lightDiffuseColor * diffuseIntensity;

	// SPECULAR COLOR
	//vec3 halfVector = normalize(normalize(-lightDir) + normalize(-cameraVec));
	//float specintensity = clamp(dot(halfVector, newNormal), 0, 1);

	vec3 reflectionVector = lightDir - dot(lightDir, newNormal) * 2 * newNormal;
	float specintensity = clamp(dot(-cameraVec, normalize(reflectionVector)), 0, 1);

	specintensity = pow(specintensity, objectSpecFalloff);

	specintensity *= diffuseIntensity;

	vec3 specularColor = lightSpecColor * objectSpecColor * specintensity * texture( SpecularMap, UV ).rgb;

	// TOTAL COLOR
    color = vec4(emissiveColor + ambientColor + diffuseColor + specularColor, 0);

}